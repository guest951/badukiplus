 /* This file is automatically generated by mkpat from ./patterns.dat */
 /* Do not edit this file manually */



#include <cstdlib>
#include <iostream>
#include <iomanip>
#include <string>

using namespace std;

#include "game.h"
#include "baduki.h"
#include "patterns.h"
#include "patternsdat.h"

extern stringRec sList[maxString];
extern int SMap[maxString];

extern int board_size;

float pattern_value(int x, int y, struct pattern_type pat, int dir, int *px, int *py)
{
  float value = pat.value;
  int xx, yy;

  switch (pat.id) {
  case 10000:
 if (GID(0,0) != GID(2,0))
    merge_group(GID(0,0), GID(2,0));
    break;
  case 10001:
 if (GID(0,0) != GID(2,0))
    merge_group(GID(0,0), GID(2,0));
    break;
  case 1:
 if (LIBB(2,1) < 3)
      value = 0;
    break;
  case 2:
 if (BORD(3,1) == -1)
      value = 2;
    break;
  case 3:
 if (!ISSAFE(1,1) || HISSTONES(1,0) >= 2)
    value = 0;
  else if (LIBC(0,1) == 2 && BORD(-1,0) != 1 && BORD(0,-1) != 1 &&
  	BORD(1,-1) != 1) {
    PPOS(0,0);
    value = 5;
  }
    break;
  case 4:
 if (!ISSAFE(2,1) || ISDEAD(3,0))
    value = 0;
  else if (!ISSAFE(0,1))
    value = 2;
  else if (MYSTONES(2,0) == 2) {
    value = 4;
    PPOS(1,0);
  } else if (BORD(1,-1) == 1 && BORD(3,-1) == 1)
    value = 3;
    break;
  case 5:
 if (BORD(1, 2) == -1 || !ISSAFE(2,1))
      value = 0;
  else if (!ISSAFE(0, 0) || !ISSAFE(2, 0))
      value = 2;
  else if (LIBC(0,0) == 2 || LIBC(2,0) == 2)
      value = 3;
  else if (CLAIM(1,2) < -13)
	value = 4;
  else if (CLAIM(1,2) < -10)
	value = 5;
    break;
  case 6:
 if (LIBB(2, 1) < 3 || !ISSAFE(0,1) || CONNECTMAP2(2,0) > 0)
      value = 0;
  else if (LIBC(0,0) == 2 && BORD(3,0) == 0) {
    PPOS(2,0);
    value -= 2;
  }
    break;
  case 7:
 value += (float) POW2(1,1) / 5;
    break;
  case 8:
 if (LIBC(1,0) == 2 || !ISSAFE(1,1) || CONNECTMAP2(2,0) > 0)
    value = 0;
  else {
    value -= HISSTONES(2,1);
    if (height_cmp2(PCXY(2,1), 3, 5) == 0)
      value += 2;
  }
    break;
  case 9:
 if (BORD(1,0) == 0 && BORD(0,0) == 0)
    value = 0;
  else if (BORD(1,0) == 1 && !ISSAFE(1,0))
    value = 0;
  else if (BORD(0,0) == 1 && !ISSAFE(1,0))
    value = 0;
    break;
  case 11:
 if (!ISSAFE(1,1))
    value = 0;
    break;
  case 12:
 if (!ISSAFE(2,1) || !ISSAFE(3,0) || !ISSAFE(0,1))
    value = 0;
  else if (BORD(2,-1) == -1) {
    PPOS(1,0);
  }
    break;
  case 13:
 if (SCORE(2,0) >= 0) {
    value = 4.5;
    PPOS(2,0);
  }
    break;
  case 14:
 if (SCORE(2,1) < 0)
    value = 0;
  else
    value += (float) POW(2,1) / 4;
    break;
  case 15:
 if (!ISSAFE(0,0) || SCORE(1,1) > 0 || PROT(1,1))
    value = 0;
  else {
/*    if (BORD(1,2) == 0 && HISSTONES(1,2) <= 1 && BORD(2,1) != -1) {
      PPOS(1,2);
      value = 3;
    } else if (BORD(2,1) == 0 && HISSTONES(2,1) <= 1 && BORD(1,2) != -1) {
      PPOS(2,1);
      value = 3;
    } */
    TRY_PLAY(1,1, -1);
    if ((KILLABLE(1,0) || KILLABLE(0,1)) && !KILLABLE(1,1))
      value = 5.5;
  }
    break;
  case 17:
 if (!ISSAFE(0,1))
    value = 0;
  else {
/*    if (HISSTONES(1,1) == 3)
      value = 0; */
    value -= HISSTONES(1,1)*2;
  }
    break;
  case 18:
 if (!ISSAFE(2,0) || CLAIM(2,2) > 5)
    value = 4.9;
    break;
  case 19:
 if (!(SAFECON(0,1) && SAFECON(2,1) && (ISSAFE(1,2) || ISSAFE(1,0)) &&
	(BORD(0,0) == 0 || SAFECON(0,0)) &&
	(BORD(0,2) == 0 || SAFECON(0,2)) &&
	(BORD(2,0) == 0 || SAFECON(2,0)) &&
	(BORD(2,2) == 0 || SAFECON(2,2))))
    value = 0;
    break;
  case 20:
 if (!(SAFECON(2,1)))
    value = 0;
    break;
  case 21:
 if (!ISSAFE(2,1))
    value = 0;
    break;
  case 24:
 if (LIBC(1,1) != 2)
    value = 0;
    break;
  case 25:
 if (!ISSAFE(1,0))
    value = 0;
    break;
  case 26:
 if (!ISSAFE(2,0))
    value = 0;
    break;
  case 27:
 if (!ISSAFE(0,1) || !ISSAFE(1,0) || !ISSAFE(2,0))
    value = 0;
    break;
  case 104:
 if (LIBC(0,1) < 3)
      value = 0;
  else if (BORD(0,3) == -1 && SSIZE(0,1) == 1 && LIBC(0,1) == 4) {
    PPOS(1,1);
  } else if (BORD(0,0) == 1 && LIBB(3,1) == 4) {
    PPOS(3,1);
    value = value + 1;
  }
    break;
  case 105:
 if (LIBC(0,1) < 3)
      value = 0;
    break;
  case 106:
 if (LIBC(0,1) < 3)
      value = 0;
    break;
  case 108:
 if (!ISSAFE(0,2))
    value = 0;
    break;
  case 109:
 if (!ISSAFE(0,2) || !ISSAFE(1,2) || SCORE(-1, 2) <= 0 || SCORE(2,2) >= 0)
    value = 0;
    break;
  case 110:
 if (BORD(3,1) == -1 || !ISSAFE(1,1))
      value = 0;
  else if (SCORE(2,1) < 0) {
    TRY_PLAY(2, 1, 1);
    if (SAVEABLE(1,1))
      value = 2;
    else
      value = 8;
    restoreState();
  }
    break;
  case 111:
   if (!ISSAFE(1, 1))
      value = 0;
    else {
      if (BORD(2,2) == 0) {
        TRY_PLAY(3,1,1);
        TRY_PLAY(2,0,-1);
        if (KILLABLE(2,1)) {
          PPOS(3,1);
          value = 6;
          break;
        }
      }
      TRY_PLAY(2, 0, 1);
      TRY_PLAY(3, 0, -1);
      TRY_PLAY(1, 0, 1);
      if (KILLABLE(3, 0) && !KILLABLE(2,0))
        value = 5;
      restoreState();
    }
    break;
  case 112:
 if (!ISSAFE(2,0) || LIBB(0,0) == 1)
    value = 0;
  else
    value += LIBB(0,0);
    break;
  case 113:
 TRY_PLAY(1, 2, -1);
  if (KILLABLE(1,2))
    value = 0;
  restoreState();
    break;
  case 114:
 if (!ISSAFE(1,1) || !ISSAFE(1,2))
    value = 0;
    break;
  case 115:
 if (LIBC(2,2) > 2 || !ISSAFE(2,1))
    value = 0;
    break;
  case 116:
 if (LIBC(3,2) < 2)
    value = 0;
    break;
  case 117:
 if (!ISSAFE(0,2))
    value = 0;
  else if (LIBC(0,2) == 2) {
    PPOS(1,1);
    value -= 1;
  }
    break;
  case 118:
 if (!ISSAFE(0,2))
    value = 0;
    break;
  case 119:
 if (!ISSAFE(0,2))
    value = 0;
    break;
  case 121:
 if (LIBC(0,1) <= 2 || !ISSAFE(0,1))
    value = 0;
    break;
  case 122:
 if (LIBC(2,1) > 2 || !ISSAFE(2,1))
    value = 0;
    break;
  case 123:
 if (!ISSAFE(0,2) || !ISSAFE(2,2))
    value = 0;
  else if (BORD(3,2) != 1)
    value += POW(1,1) / 2;
    break;
  case 124:
 if (!ISSAFE(0,2) || !ISSAFE(3,2))
    value = 0;
    break;
  case 125:
 if (LIBC(3,1) <= 2)
    value = 0;
    break;
  case 126:
 if (!ISSAFE(1,0))
    value = 0;
  else if (LIBB(3,0) < 3) {
    PPOS(2,0);
  } else {
    value += (float) POW(3,0) / 2;
  }
    break;
  case 127:
 if (!ISSAFE(0,0) && !ISSAFE(3,1))
    value = 0;
    break;
  case 128:
 if (!ISSAFE(1,1))
    value = 0;
  else
    value -= MYSTONES(1,0);
    break;
  case 129:
 if (!ISSAFE(0,1) || ISDEAD(2,1))
    value = 0;
    break;
  case 130:
 if (!ISSAFE(1,0) || !ISSAFE(1,1))
    value = 0;
  else if (HISSTONES(2,1) > 1)
    value -= 3;
    break;
  case 132:
 value -= MYSTONES(1,1);
    break;
  case 133:
 if (CONNECTMAP2(2,2) == 0) {
    value = 0;
  } else if (CLAIM(2,2) <= 0) {
    PPOS(2,2);
    value -= 1;
  } else if (HISSTONES(2,3) > 0) {
    PPOS(2,2);
  }
    break;
  case 134:
 value += POW2(0,3) / 2.0;
    break;
  case 135:
 value += POW2(0,2) / 2.0;
    break;
  case 136:
 if (!ISSAFE(1,3))
    value = 0;
    break;
  case 303:
 if (CLAIM(2, 5) > 7 && LIBB(7,2) == 4) {
    PPOS(7,2);
  } else if (PERCENT(25)) {
    PPOS(3, 5);
  } else if (PERCENT(30)) {
    PPOS(5, 3);
  }
    break;
  case 304:
 if (CLAIM(4, 2) < -4)
    value = 0;
  else if (PERCENT(30)) {
    PPOS(4,3);
  }
    break;
  case 306:
 if (CLAIM(3, 2) < -4)
    value = 0;
  else if (PERCENT(30)) {
    PPOS(2,2);
  }
    break;
  case 307:
 if (CLAIM(3, 2) < -6 || PERCENT(30)) {
    PPOS(2,2);
  }
    break;
  case 311:
 if (LIBB(5,2) < 4)
    value = 0;
  else if (CLAIM(5,2) < -4)
    value += CLAIM(5,2) / 3;	/* @의 Claim이 -니까 */
    break;
  default:
    break;
  }

  restoreState();
  return value;
}
int total_patterns = 75;
